library('caret')
samples = 1000
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 1000
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 2000
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 2000
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 2000
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 2000
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 5*160
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 5*160
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 5*160
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 5*160
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 5*160
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
library('MASS')
library('caret')
samples = 5*160
r = c(seq(from = 0, to = 1, by = 0.05))
acc = numeric(length = length(r))
for(i in 1:length(r)){
df = mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r[i], r[i], 1), nrow=2), empirical=TRUE)
df <- as.data.frame(df)
names(df) <- c("x", "y")
cor(df$x, df$y)
qs <- quantile(df[, 2], probs = c(0.15, 0.85))
df$cat <- cut(df$y,
breaks=c(-Inf, -1, 1, Inf),
labels=c("low","middle","high"))
df.small <- df[df$cat != "middle", ]
trainIndex <- createDataPartition(df.small$cat, p = .8,
list = FALSE,
times = 1)
df.train <- df.small[trainIndex, ]
df.test <- df.small[-trainIndex, ]
# Fit the model
model <- glm(cat ~ x, data = df.train, family = binomial)
# Summarize the model
summary(model)
# Make predictions
prob <- predict(model, newdata = df.test)
predict.class <- ifelse(prob > .05, "high", "low")
acc[i] <- mean(predict.class == df.test$cat)
}
plot(y = acc, x = r)
install.packages("lavaan")
lavaan:summary
library("lavaan")
?lavaan::`summary,lavaan-method`
library(psychometric) # load package with function
CIr(r=.13, n = 425, level = .95)
CIr(r=.04, n = 448, level = .95)
install.packages("here")
library("foreign")
shiny::runApp('C:/Users/mauri/OneDrive/Arbeit/Projekte/OxyReceptor/OXTRmeth_analyses/OXTR-shinyApp')
runApp('C:/Users/mauri/OneDrive/Arbeit/Projekte/OxyReceptor/OXTRmeth_analyses/OXTR-shinyApp')
shiny::runApp('C:/Users/mauri/OneDrive/Arbeit/Projekte/OxyReceptor/OXTRmeth_analyses/OXTR-shinyApp')
runApp('C:/Users/mauri/OneDrive/Arbeit/Projekte/OxyReceptor/OXTRmeth_analyses/OXTR-shinyApp')
runApp('C:/Users/mauri/OneDrive/Arbeit/Projekte/OxyReceptor/OXTRmeth_analyses/OXTR-shinyApp')
runApp('C:/Users/mauri/OneDrive/Arbeit/Projekte/OxyReceptor/OXTRmeth_analyses/OXTR-shinyApp')
df <- read_excel("data/OXTR_table.xlsx")
df <- df[!is.na(df$Effect_CTQ), ]
df$`chr3 position` <- as.character(df$`chr3 position`)
df <- read_excel("data/OXTR_table.xlsx")
setwd("C:\Users\mauri\OneDrive\Arbeit\Projekte\OxyReceptor\OXTRmeth_analyses\OXTR-shinyApp")
setwd("C:/Users/mauri/OneDrive/Arbeit/Projekte/OxyReceptor/OXTRmeth_analyses/OXTR-shinyApp")
df <- read_excel("data/OXTR_table.xlsx")
df <- df[!is.na(df$Effect_CTQ), ]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$MT2 <- T
input <- 0
input$MT2 <- T
MT2Test <- T
ifelse(MT2Test == T & df$MT2 == T, T, F)
MT2Test <- F
ifelse(MT2Test == T & df$MT2 == T,
T,
F)
names(df)
MT2Test <- F
TransTest <- T
ifelse(MT2Test == T & df$MT2 == T,
T,
ifelse(
TransTest == T & df$Exon3_Translational == T,
T,
F
))
MT2Test <- T
TransTest <- F
ifelse(MT2Test == T & df$MT2 == T,
T,
ifelse(
TransTest == T & df$Exon3_Translational == T,
T,
F
))
MT2Test <- F
TransTest <- F
ifelse(MT2Test == T & df$MT2 == T,
T,
ifelse(
TransTest == T & df$Exon3_Translational == T,
T,
ifelse(
MT2Test == F & TransTest == F,
T,
F
)
))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
install.packages("DT")
library("DT")
runApp()
runApp()
runApp()
?renderDataTable
?DT::renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df$`Infinium 450K`
is.na(df$`Infinium 450K`)
is.na(df$`Infinium 450K`) == F
is.na(df$`Infinium 450K`) == F
t = T
t == T & is.na(df$`Infinium 450K`) == F
runApp()
nchar(df$`Infinium 450K` > 2)
nchar(df$`Infinium 450K`) > 2
runApp()
df[t == T & nchar(df$`Infinium 450K`) > 2, ]
runApp()
runApp()
runApp()
!is.na(df$`Infinium 450K`)
runApp()
runApp()
test == T
test = T
runApp()
runApp()
runApp()
install.packages("rsconnect")
rsconnect::setAccountInfo(name='msicorello', token='6E092B704FC286AAF0CACF9A2AF595DD', secret='dfeBvEKBrWtuE0bttvPLueQs93leSMPQMBLladbI')
rsconnect::deployApp('C:/Users/mauri/OneDrive/Arbeit/Projekte/OxyReceptor/OXTRmeth_analyses/OXTR-shinyApp')
shiny::runApp()
shiny::runApp()
runApp()
