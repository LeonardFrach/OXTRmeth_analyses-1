exon3ind <- CpG_corr_k
exon3ind[132:182, 132:182] <- "exon 3 cluster"
exon3ind[53:64, 53:64] <- "intron 1 cluster"
exon3ind <- ifelse(exon3ind == "exon 3 cluster" | exon3ind == "intron 1 cluster", exon3ind, "other section")
CpG_corr_mk <- data.frame(CpG_corr[lower.tri(CpG_corr)], CpG_corr_k[lower.tri(CpG_corr_k)], exon3ind[lower.tri(exon3ind)])
names(CpG_corr_mk) <- c("mother", "child", "geneSection")
cor(CpG_corr_mk$mother, CpG_corr_mk$child)
ggplot(data = CpG_corr_mk, aes(y = child, x = mother, group = geneSection, colour = geneSection)) +
geom_point() +
geom_point(data = subset(CpG_corr_mk, geneSection == "intron 1 cluster"))
ggsave(here("Figures", "motherChildCorrespondance.pdf"), device = "pdf")
cor(CpG_corr_mk[CpG_corr_mk$geneSection == "exon 3 cluster", "mother"], CpG_corr_mk[CpG_corr_mk$geneSection == "exon 3 cluster", "child"])
cor(CpG_corr_mk[CpG_corr_mk$geneSection == "intron 1 cluster", "mother"], CpG_corr_mk[CpG_corr_mk$geneSection == "intron 1 cluster", "child"])
cor(CpG_corr_mk[CpG_corr_mk$geneSection == "other section", "mother"], CpG_corr_mk[CpG_corr_mk$geneSection == "other section", "child"])
#################################
# unsupervised datra-driven description of OXTR
# z score variables
df_CpG_k_z = scale(df_CpG_k)
#################
# cluster analysis (dbscan)
# transpose data
df_CpG_k_z_trans = t(df_CpG_k_z)
# determine eps. try k = 3, k = 5 (default), k = 8, k = 12
dbscan::kNNdistplot(df_CpG_k_z_trans, k =  3)
abline(h = 5, lty = 2) # for k = 3
dbscan::kNNdistplot(df_CpG_k_z_trans, k =  5)
abline(h = 5.8, lty = 2) # for k = 5
dbscan::kNNdistplot(df_CpG_k_z_trans, k =  8)
abline(h = 7.7, lty = 2) # for k = 8
dbscan::kNNdistplot(df_CpG_k_z_trans, k =  12)
abline(h = 8, lty = 2) # for k = 8
# apply clustering
res.fpc3 <- fpc::dbscan(df_CpG_k_z_trans, eps = 5, MinPts = 3)
print(res.fpc3)
res.fpc5 <- fpc::dbscan(df_CpG_k_z_trans, eps = 5.8, MinPts = 5)
print(res.fpc5)
res.fpc8 <- fpc::dbscan(df_CpG_k_z_trans, eps = 7.7, MinPts = 8)
print(res.fpc8)
res.fpc12 <- fpc::dbscan(df_CpG_k_z_trans, eps = 8, MinPts = 12)
print(res.fpc12)
# write.csv(data.frame(res.fpc5$cluster, names(df_CpG_k)), "clusterAssignment.csv")
# plot
df_clustMem = data.frame(dfcodes$CpG, dfcodes$segment2, res.fpc3$cluster, res.fpc5$cluster, res.fpc8$cluster, res.fpc12$cluster)
df_clustMem_long = melt(df_clustMem, id.vars = c("dfcodes.CpG", "dfcodes.segment2"))
ggplot(data = df_clustMem_long, aes(x = reorder(dfcodes.CpG, rep((1:nrow(df_clustMem)), length.out = nrow(df_clustMem_long))), y = value, colour = dfcodes.segment2, shape = variable)) +
geom_jitter(width = 0, height = 0.3) + scale_y_continuous(breaks=c(0, 1, 2)) + scale_x_discrete(breaks=NULL) +
xlab("CpG Sites") + ylab("Cluster Assignment") + theme_classic() + theme(legend.title = element_blank())
ggsave(here("Figures", "DBSCAN_clustMembership_children.pdf"), device = "pdf")
ggsave(here("Figures", "DBSCAN_clustMembership_children.png"), device = "png")
#################
# hierarchical clustering (hclust)
# dendrogram
dd <- dist(df_CpG_k_z_trans, method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
fviz_dend(hc)
fviz_nbclust(df_CpG_k_z_trans, FUN = hcut, method = "wss")
fviz_nbclust(df, FUN = hcut, method = "silhouette")
pdf(here("Figures", "Dendrogram_children.pdf"))
fviz_dend(
hc,
k = 3,
horiz = TRUE,
rect = TRUE,
rect_fill = TRUE,
rect_border = "jco",
k_colors = "jco",
cex = 0.3
)
dev.off()
png(here("Figures", "Dendrogram_children.png"))
fviz_dend(
hc,
k = 3,
horiz = TRUE,
rect = TRUE,
rect_fill = TRUE,
rect_border = "jco",
k_colors = "jco",
cex = 0.3
)
dev.off()
clustAssign_child <- cutree(hc, k = 3)
# proportions of genetic sections represented in the three clusters
df_hclustAssign_child <- data.frame(dfcodes, clustAssign_child)
round(table(df_hclustAssign_child[df_hclustAssign_child$clustAssign_child == 1, "segment2"])/sum(clustAssign_child == 1), 2)
round(table(df_hclustAssign_child[df_hclustAssign_child$clustAssign_child == 2, "segment2"])/sum(clustAssign_child == 2), 2)
round(table(df_hclustAssign_child[df_hclustAssign_child$clustAssign_child == 3, "segment2"])/sum(clustAssign_child == 3), 2)
df_hclustAssign_child$DBSCANclust <- df_clustMem$res.fpc5.cluster
df_hclustAssign_child$hclustRec <- ifelse(df_hclustAssign_child$clustAssign_child == 1,
0,
ifelse(df_hclustAssign_child$clustAssign_child == 2,
1,
2)
)
round(sum(df_hclustAssign_child$DBSCANclust == df_hclustAssign_child$hclustRec)/nrow(df_hclustAssign_child), 2)
# mother-child agreement in clustering solutions
round(sum(df_hclustAssign_child$hclustRec == df_hclustAssign_mothers$hclustRec)/nrow(df_hclustAssign_child), 2)
round(sum(df_hclustAssign_child$DBSCANclust == df_hclustAssign_mothers$DBSCANclust)/nrow(df_hclustAssign_child), 2)
#################################
# tests on average DNA methylation
# reload full mother data with all CpGs included
df_CpG_m = df[,grepl("CpG_m", names(df))]
df_CpG_m = as.data.frame(apply(df_CpG_m,2, function(x){as.numeric(sub("%", "", x, fixed=TRUE))/100}))
df_outcomes = df[complete.cases(df_CpG_m), c("ctq_sum", "Genexp_OXTR_mother", "ctq_dich01_multi01")]
df_CpG_m = df_CpG_m[complete.cases(df_CpG_m),]
# Correlations with Overall average
meanData <- data.frame(df_outcomes, rowMeans(df_CpG_m))
t.test(meanData[meanData$ctq_dich01_multi01 == 0, "rowMeans.df_CpG_m."], meanData[meanData$ctq_dich01_multi01 == 1, "rowMeans.df_CpG_m."])
cor.test(meanData$rowMeans.df_CpG_m., meanData$ctq_dich01_multi01)
cor.test(meanData$rowMeans.df_CpG_m., meanData$Genexp_OXTR_mother)
cor.test(meanData$rowMeans.df_CpG_m., meanData$ctq_sum)
# cross-validation
repeatedMeanCrossVal("ctq_dich01_multi01", meanData, nrepeats = 100)
repeatedMeanCrossVal("Genexp_OXTR_mother", meanData, nrepeats = 100)
repeatedMeanCrossVal("ctq_sum", meanData, nrepeats = 100)
# average DNA methylation for different amplicons
ampliconMeans <- data.frame(
matrix(nrow = nrow(df_outcomes),
ncol = 11,
dimnames = list(NULL, paste0("ampl_", 1:11)))
)
# mean correlation of amplicons
for(i in 1:11){
selectCpGs <- dfcodes[dfcodes$amplicon == i, "CpG"]
selectCpGs <- str_replace(selectCpGs, pattern = "_", replace = "_m_")
rowMean <- rowMeans(df_CpG_m[, selectCpGs])
ampliconMeans[,i] <- rowMean
}
meanData <- data.frame(meanData, ampliconMeans)
trauma_ampl_cors <- cor(meanData[, c("ctq_dich01_multi01", names(ampliconMeans))])
genExpr_ampl_cors <- cor(meanData[, c("Genexp_OXTR_mother", names(ampliconMeans))], use = "pairwise.complete.obs")
ctq_ampl_cors <- cor(meanData[, c("ctq_sum", names(ampliconMeans))])
stackAmpl <- c(trauma_ampl_cors[1, -1], genExpr_ampl_cors[1, -1], ctq_ampl_cors[1, -1])
plotAmpl <- data.frame(stackAmpl, "amplicon" = names(stackAmpl), "outcome" = rep(c("Trauma", "Gene expression", "CTQ"), each = 11))
plotAmpl$amplicon <- factor(rep(1:11, length.out = 33))
ggplot(data = plotAmpl, aes(x = amplicon, y = stackAmpl, group = outcome, colour = outcome)) +
geom_line() + geom_point() +
ylab("Correlation with DNA methylation") +
theme_classic()
ggsave(here("Figures", "ampliconCorrs.png"), device = "png")
#################
# prepare variables for shinyapp table
##########
# Bayes factors
df_BFout <- as.data.frame(matrix(nrow = nrow(dfcodes), ncol = 4, dimnames = list(NULL, c("CpGs", "BFgenExpr", "BFCTQ", "BFtrauma"))))
# new code
for(i in 1:nrow(dfcodes)){
BF_geneExpr = extractBF(correlationBF(df$Genexp_OXTR_mother[completeCaseInd], df_CpG_m[, i]))$bf
BF_CTQ = extractBF(correlationBF(df$ctq_sum[completeCaseInd], df_CpG_m[, i]))$bf
BF_trauma = extractBF(ttestBF(df_CpG_m[df$ctq_dich01_multi01[completeCaseInd] == 1, i],
df_CpG_m[df$ctq_dich01_multi01[completeCaseInd] == 0, i]))$bf
df_BFout[i, ] <- c(dfcodes[i,1], BF_geneExpr, BF_CTQ, BF_trauma)
}
shiny_BF <- df_BFout
##########
# shinyapp table
shinyTable <- data.frame(shiny_nOutliers, shiny_clusterAssign$hclustRec, shiny_empSD, shiny_pInsuffVar, shiny_sensitivity, shiny_BF[, 2:4])
glossar <- read.csv(here("Data", "CpG_glossar.csv"))
names(glossar)[1] <- "Chromosomal_Location"
names(shinyTable)[1] <- "CpG_Nr"
shinyTable_out <- dplyr::left_join(shinyTable, glossar)
shinyTable_out$position <- stringr::str_split_fixed(shinyTable_out$Chromosomal_Location, ":", 2)[, 2]
# require(openxlsx)
# write.xlsx(shinyTable_out, file = "Results/shinyPrepareOXTRstructure.xlsx", colNames = T, rowNames = T)
length(shiny_empSD)
shiny_empSD <- apply(df_CpG_m, 2, sd)
shiny_empSD
length(shiny_empSD)
#################################
# Load and prepare packages/data
# load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(corrplot, mclust, party, psych, fpc, dbscan, stringr, ggplot2, EnvStats, stats, factoextra, reshape, caret, pls, plyr, here, BayesFactor)
# load custom functions
source(here("Functions", "OXTRmeth_helperFuns.R"))
# load data and convert % to decimal
df = read.csv(here("Data", "RUB_OXTR_Daten_26.4.csv"), header = T, sep = ";")
# subset mother CpGs and convert to decimal
df_CpG_m = df[,grepl("CpG_m", names(df))]
df_CpG_m = as.data.frame(apply(df_CpG_m,2, function(x){as.numeric(sub("%", "", x, fixed=TRUE))/100}))
df_outcomes = df[complete.cases(df_CpG_m), c("ctq_sum", "Genexp_OXTR_mother", "ctq_dich01_multi01")]
completeCaseInd = complete.cases(df_CpG_m)
df_CpG_m = df_CpG_m[completeCaseInd,]
# load identifier of gene sections
dfcodes = read.csv(here("Data", "OXTR_segmentCodes.csv"), header = T, sep = ";")
dfcodes = dfcodes[dfcodes$CpG %in% str_replace(names(df_CpG_m), "_m_", "_"),]
#################################
# qualitative description of OXTR
# plot methylation across CpGs to check for sufficient variance
boxplot(df_CpG_m, range = 1.5)
# methylation on Exon 1
median(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "exon1")]))
iqr(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "exon1")]))
describe(df_CpG_m)
mean(describe(df_CpG_m)[which(dfcodes$segment2 == "exon1"), "skew"])
# methylation on MT2
median(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "MT2")]))
iqr(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "MT2")]))
describe(df_CpG_m)
mean(describe(df_CpG_m)[which(dfcodes$segment2 == "MT2"), "skew"])
# methylation on enhancer
median(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "enhancer")]))
iqr(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "enhancer")]))
describe(df_CpG_m)
mean(describe(df_CpG_m)[which(dfcodes$segment2 == "enhancer"), "skew"])
# count/plot number of outliers per CpG (3*IQR)
out_count = as.data.frame(matrix(nrow = ncol(df_CpG_m), ncol = 2, dimnames = list(NULL, c("CpG", "nOut"))))
out_count$CpG = str_replace(names(df_CpG_m), "_m_", "_")
for(i in 1:ncol(df_CpG_m)){out_count[i,2] = length(boxplot.stats(df_CpG_m[,i], coef = 3)$out)}
df_out = merge(out_count, dfcodes, by = "CpG", sort = F)
ggplot(data = df_out, aes(x = reorder(CpG, 1:nrow(df_out)), y = nOut, colour = segment2)) +
geom_point()
# correlation plot
CpG_corr = cor(df_CpG_m, use = "pairwise.complete.obs")
colnames(CpG_corr) <- NULL
rownames(CpG_corr) <- substring(rownames(CpG_corr), 7)
pdf(here("Figures", "corrPlot_mother.pdf"))
corrplot::corrplot(CpG_corr, tl.pos = "n", tl.cex = 0.25, method = "color", type = "upper", tl.col = "black")
dev.off()
mean(CpG_corr[132:182, 132:182])
mean(CpG_corr[53:64, 53:64])
shiny_nOutliers <- out_count
#################################
# unsupervised data-driven description of OXTR
# z score variables
df_CpG_m_z = scale(df_CpG_m)
#################
# cluster analysis (dbscan)
# transpose data
df_CpG_m_z_trans = t(df_CpG_m_z)
# determine eps. try k = 3, k = 5 (default), k = 8, k = 12
dbscan::kNNdistplot(df_CpG_m_z_trans, k =  3)
abline(h = 5, lty = 2) # for k = 3
dbscan::kNNdistplot(df_CpG_m_z_trans, k =  5)
abline(h = 5.8, lty = 2) # for k = 5
dbscan::kNNdistplot(df_CpG_m_z_trans, k =  8)
abline(h = 7.7, lty = 2) # for k = 8
dbscan::kNNdistplot(df_CpG_m_z_trans, k =  12)
abline(h = 8, lty = 2) # for k = 8
# apply clustering
res.fpc3 <- fpc::dbscan(df_CpG_m_z_trans, eps = 5, MinPts = 3)
print(res.fpc3)
res.fpc5 <- fpc::dbscan(df_CpG_m_z_trans, eps = 5.8, MinPts = 5)
print(res.fpc5)
res.fpc8 <- fpc::dbscan(df_CpG_m_z_trans, eps = 7.7, MinPts = 8)
print(res.fpc8)
res.fpc12 <- fpc::dbscan(df_CpG_m_z_trans, eps = 8, MinPts = 12)
print(res.fpc12)
# write.csv(data.frame(res.fpc5$cluster, names(df_CpG_m)), "clusterAssignment.csv")
# plot
df_clustMem = data.frame(dfcodes$CpG, dfcodes$segment2, res.fpc3$cluster, res.fpc5$cluster, res.fpc8$cluster, res.fpc12$cluster)
df_clustMem_long = melt(df_clustMem, id.vars = c("dfcodes.CpG", "dfcodes.segment2"))
ggplot(data = df_clustMem_long, aes(x = reorder(dfcodes.CpG, rep((1:nrow(df_clustMem)), length.out = nrow(df_clustMem_long))), y = value, colour = dfcodes.segment2, shape = variable)) +
geom_jitter(width = 0, height = 0.3) + scale_y_continuous(breaks=c(0, 1, 2)) + scale_x_discrete(breaks=NULL) +
xlab("CpG Sites") + ylab("Cluster Assignment") + theme_classic() + theme(legend.title = element_blank())
ggsave(here("Figures", "DBSCAN_clustMembership.pdf"), device = "pdf")
ggsave(here("Figures", "DBSCAN_clustMembership.png"), device = "png")
#################
# hierarchical clustering (hclust)
# dendrogram
dd <- dist(df_CpG_m_z_trans, method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
fviz_dend(hc)
fviz_nbclust(df_CpG_m_z_trans, FUN = hcut, method = "wss")
fviz_nbclust(df, FUN = hcut, method = "silhouette")
pdf(here("Figures", "Dendrogram.pdf"))
fviz_dend(
hc,
k = 3,
horiz = TRUE,
rect = TRUE,
rect_fill = TRUE,
rect_border = "jco",
k_colors = "jco",
cex = 0.3
)
dev.off()
png(here("Figures", "Dendrogram_mothers.png"))
fviz_dend(
hc,
k = 3,
horiz = TRUE,
rect = TRUE,
rect_fill = TRUE,
rect_border = "jco",
k_colors = "jco",
cex = 0.3
)
dev.off()
clustAssign_mothers <- cutree(hc, k = 3)
# proportions of genetic sections represented in the three clusters
df_hclustAssign_mothers <- data.frame(dfcodes, clustAssign_mothers)
round(table(df_hclustAssign_mothers[df_hclustAssign_mothers$clustAssign_mothers == 1, "segment2"])/sum(clustAssign_mothers == 1), 2)
round(table(df_hclustAssign_mothers[df_hclustAssign_mothers$clustAssign_mothers == 2, "segment2"])/sum(clustAssign_mothers == 2), 2)
round(table(df_hclustAssign_mothers[df_hclustAssign_mothers$clustAssign_mothers == 3, "segment2"])/sum(clustAssign_mothers == 3), 2)
df_hclustAssign_mothers$DBSCANclust <- df_clustMem$res.fpc5.cluster
df_hclustAssign_mothers$hclustRec <- ifelse(df_hclustAssign_mothers$clustAssign_mothers == 1,
0,
ifelse(df_hclustAssign_mothers$clustAssign_mothers == 2,
1,
2)
)
round(sum(df_hclustAssign_mothers$DBSCANclust == df_hclustAssign_mothers$hclustRec)/nrow(df_hclustAssign_mothers), 2)
shiny_clusterAssign <- df_hclustAssign_mothers
#################################
# supervised data-driven description of OXTR
# # mean sensitivity from Moser et al. (2020), Table S7, rightmost column
# meanSens = mean(c(0.67, 1.37, 1.39, 1.51, 1.24, 2.28))/100
#
# # test which CpGs have variance higher than chance
# varTestFun <- function(x, referenceVar){
#   chi_square = ((length(x)-1)*var(x))/referenceVar
#   p = pchisq(chi_square, df = length(x)-1, lower.tail = F)
#   p
# }
# CpGvariancePs = apply(df_CpG_m, 2, varTestFun, meanSens^2)
# sum(CpGvariancePs > 0.05)
# sum(p.adjust(CpGvariancePs, method = "fdr") > 0.05)
# dfvar_plot = data.frame(dfcodes, CpGvariancePs)
# dfvar_plot$insuffVar = ifelse(CpGvariancePs > 0.05, 1, 0)
#
# ggplot(data = dfvar_plot, aes(x = reorder(CpG, 1:nrow(df_out)), y = insuffVar, colour = segment2)) +
#   geom_point()
df_CpGwiseVars <- as.numeric(read.csv2(here("Data", "OXTRStabwSingleCpGs.csv"))[,3])^2
df_CpGwiseVars <- c(df_CpGwiseVars, rep(0.0228^2, times = ncol(df_CpG_m)-length(df_CpGwiseVars)))
dfchi <- nrow(df_CpG_m)-1
CpGvariancePs <- numeric(ncol(df_CpG_m))
# descriptives for sensitivity
median(sqrt(df_CpGwiseVars))
iqr(sqrt(df_CpGwiseVars))
range(sqrt(df_CpGwiseVars))
for(i in 1:ncol(df_CpG_m)){
chi_square <- dfchi*var(df_CpG_m[,i])/df_CpGwiseVars[i]
CpGvariancePs[i] = pchisq(chi_square, df = dfchi, lower.tail = F)
}
pf(2.5, 109, 11, lower.tail = F)
sum(CpGvariancePs > 0.05)
sum(p.adjust(CpGvariancePs, method = "fdr") > 0.05)
dfvar_plot = data.frame(dfcodes, CpGvariancePs)
dfvar_plot$insuffVar = ifelse(CpGvariancePs > 0.05, 1, 0)
ggplot(data = dfvar_plot, aes(x = reorder(CpG, 1:nrow(df_out)), y = insuffVar, colour = segment2)) +
geom_point()
# continue without CpGs with insufficient variance
df_CpG_m <- df_CpG_m[, CpGvariancePs <= 0.05]
dfcodes <- dfcodes[CpGvariancePs <= 0.05, ]
shiny_pInsuffVar <- CpGvariancePs
shiny_sensitivity <- sqrt(df_CpGwiseVars)
shiny_empSD <- apply(df_CpG_m, 2, sd)
install.packages("renv")
renv::init()
sessionInfo()
?factoextra::fviz_dend
renv::init()
# load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(corrplot, mclust, party, psych, fpc, dbscan, stringr, ggplot2, EnvStats, stats, factoextra, reshape, caret, pls, plyr, here, BayesFactor)
# load custom functions
source(here("Functions", "OXTRmeth_helperFuns.R"))
# load data and convert % to decimal
df = read.csv(here("Data", "RUB_OXTR_Daten_26.4.csv"), header = T, sep = ";")
# subset mother CpGs and convert to decimal
df_CpG_m = df[,grepl("CpG_m", names(df))]
df_CpG_m = as.data.frame(apply(df_CpG_m,2, function(x){as.numeric(sub("%", "", x, fixed=TRUE))/100}))
df_outcomes = df[complete.cases(df_CpG_m), c("ctq_sum", "Genexp_OXTR_mother", "ctq_dich01_multi01")]
completeCaseInd = complete.cases(df_CpG_m)
df_CpG_m = df_CpG_m[completeCaseInd,]
# load identifier of gene sections
dfcodes = read.csv(here("Data", "OXTR_segmentCodes.csv"), header = T, sep = ";")
dfcodes = dfcodes[dfcodes$CpG %in% str_replace(names(df_CpG_m), "_m_", "_"),]
#################
# ML settings
maxcomp = 30
repeats = 2
folds = 5
perms = 1000
plsGrid <- expand.grid(ncomp = seq(1, maxcomp))
# do nested k-fold PLS
PLSnested_CTQcat = PLSnestedCV(df_outcomes$ctq_dich01_multi01, df_CpG_m, nrepeats = repeats, nfolds = folds, maxComps = maxcomp, setSeed = 1000, classification = T)
# do nested k-fold PLS
PLSnested_CTQcat = PLSnestedCV(df_outcomes$ctq_dich01_multi01, df_CpG_m, nrepeats = 1, nfolds = folds, maxComps = maxcomp, setSeed = 1000, classification = T)
PLSnested_CTQcat
# do nested k-fold PLS
PLSnested_CTQcat = PLSnestedCV(factor(df_outcomes$ctq_dich01_multi01), df_CpG_m, nrepeats = 1, nfolds = folds, maxComps = maxcomp, setSeed = 1000, classification = T)
# do nested k-fold PLS
PLSnested_CTQcat = PLSnestedCV(factor(df_outcomes$ctq_dich01_multi01), df_CpG_m, nrepeats = 1, nfolds = folds, maxComps = maxcomp, setSeed = 1000, classification = TRUE)
# load custom functions
source(here("Functions", "OXTRmeth_helperFuns.R"))
# do nested k-fold PLS
PLSnested_CTQcat = PLSnestedCV(factor(df_outcomes$ctq_dich01_multi01), df_CpG_m, nrepeats = 1, nfolds = folds, maxComps = maxcomp, setSeed = 1000, classification = TRUE)
PLSnested_CTQcat[[1]]
# do nested k-fold PLS
PLSnested_CTQcat = PLSnestedCV(df_outcomes$ctq_dich01_multi01, df_CpG_m, nrepeats = 1, nfolds = folds, maxComps = maxcomp, setSeed = 1000, classification = TRUE)
PLSnested_CTQcat
# do nested k-fold PLS
PLSnested_CTQcat = PLSnestedCV(df_outcomes$ctq_dich01_multi01, df_CpG_m, nrepeats = 1, nfolds = folds, maxComps = maxcomp, setSeed = 1000, classification = TRUE)
PLSnested_CTQcat
PLSnested_CTQcat[[1]]
# do nested k-fold PLS
PLSnested_CTQcat = PLSnestedCV(df_outcomes$ctq_dich01_multi01, df_CpG_m, nrepeats = 1, nfolds = folds, maxComps = maxcomp, setSeed = 1000, classification = TRUE)
PLSnested_CTQcat[[1]]
?reorder
# combined plot of PLS loadings
names(dfplot_geneExpr_loadings)[2] <- "loadings"
#################################
# Load and prepare packages/data
# load packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(corrplot, mclust, party, psych, fpc, dbscan, stringr, ggplot2, EnvStats, stats, factoextra, reshape, caret, pls, plyr, here, BayesFactor)
# load custom functions
source(here("Functions", "OXTRmeth_helperFuns.R"))
# load data and convert % to decimal
df = read.csv(here("Data", "RUB_OXTR_Daten_26.4.csv"), header = T, sep = ";")
# subset mother CpGs and convert to decimal
df_CpG_m = df[,grepl("CpG_m", names(df))]
df_CpG_m = as.data.frame(apply(df_CpG_m,2, function(x){as.numeric(sub("%", "", x, fixed=TRUE))/100}))
df_outcomes = df[complete.cases(df_CpG_m), c("ctq_sum", "Genexp_OXTR_mother", "ctq_dich01_multi01")]
completeCaseInd = complete.cases(df_CpG_m)
df_CpG_m = df_CpG_m[completeCaseInd,]
# load identifier of gene sections
dfcodes = read.csv(here("Data", "OXTR_segmentCodes.csv"), header = T, sep = ";")
dfcodes = dfcodes[dfcodes$CpG %in% str_replace(names(df_CpG_m), "_m_", "_"),]
#################################
# qualitative description of OXTR
# plot methylation across CpGs to check for sufficient variance
boxplot(df_CpG_m, range = 1.5)
# methylation on Exon 1
median(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "exon1")]))
iqr(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "exon1")]))
describe(df_CpG_m)
mean(describe(df_CpG_m)[which(dfcodes$segment2 == "exon1"), "skew"])
# methylation on MT2
median(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "MT2")]))
iqr(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "MT2")]))
describe(df_CpG_m)
mean(describe(df_CpG_m)[which(dfcodes$segment2 == "MT2"), "skew"])
# methylation on enhancer
median(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "enhancer")]))
iqr(as.matrix(df_CpG_m[,which(dfcodes$segment2 == "enhancer")]))
describe(df_CpG_m)
mean(describe(df_CpG_m)[which(dfcodes$segment2 == "enhancer"), "skew"])
# count/plot number of outliers per CpG (3*IQR)
out_count = as.data.frame(matrix(nrow = ncol(df_CpG_m), ncol = 2, dimnames = list(NULL, c("CpG", "nOut"))))
out_count$CpG = str_replace(names(df_CpG_m), "_m_", "_")
for(i in 1:ncol(df_CpG_m)){out_count[i,2] = length(boxplot.stats(df_CpG_m[,i], coef = 3)$out)}
df_out = merge(out_count, dfcodes, by = "CpG", sort = F)
ggplot(data = df_out, aes(x = reorder(CpG, 1:nrow(df_out)), y = nOut, colour = segment2)) +
geom_point()
# correlation plot
CpG_corr = cor(df_CpG_m, use = "pairwise.complete.obs")
colnames(CpG_corr) <- NULL
rownames(CpG_corr) <- substring(rownames(CpG_corr), 7)
pdf(here("Figures", "corrPlot_mother.pdf"))
corrplot::corrplot(CpG_corr, tl.pos = "n", tl.cex = 0.25, method = "color", type = "upper", tl.col = "black")
dev.off()
mean(CpG_corr[132:182, 132:182])
mean(CpG_corr[53:64, 53:64])
shiny_nOutliers <- out_count
#################################
# unsupervised data-driven description of OXTR
# z score variables
df_CpG_m_z = scale(df_CpG_m)
#################
# cluster analysis (dbscan)
# transpose data
df_CpG_m_z_trans = t(df_CpG_m_z)
# determine eps. try k = 3, k = 5 (default), k = 8, k = 12
dbscan::kNNdistplot(df_CpG_m_z_trans, k =  3)
abline(h = 5, lty = 2) # for k = 3
dbscan::kNNdistplot(df_CpG_m_z_trans, k =  5)
abline(h = 5.8, lty = 2) # for k = 5
dbscan::kNNdistplot(df_CpG_m_z_trans, k =  8)
abline(h = 7.7, lty = 2) # for k = 8
dbscan::kNNdistplot(df_CpG_m_z_trans, k =  12)
abline(h = 8, lty = 2) # for k = 8
# apply clustering
res.fpc3 <- fpc::dbscan(df_CpG_m_z_trans, eps = 5, MinPts = 3)
print(res.fpc3)
res.fpc5 <- fpc::dbscan(df_CpG_m_z_trans, eps = 5.8, MinPts = 5)
print(res.fpc5)
res.fpc8 <- fpc::dbscan(df_CpG_m_z_trans, eps = 7.7, MinPts = 8)
print(res.fpc8)
res.fpc12 <- fpc::dbscan(df_CpG_m_z_trans, eps = 8, MinPts = 12)
print(res.fpc12)
# write.csv(data.frame(res.fpc5$cluster, names(df_CpG_m)), "clusterAssignment.csv")
# plot
df_clustMem = data.frame(dfcodes$CpG, dfcodes$segment2, res.fpc3$cluster, res.fpc5$cluster, res.fpc8$cluster, res.fpc12$cluster)
df_clustMem_long = melt(df_clustMem, id.vars = c("dfcodes.CpG", "dfcodes.segment2"))
ggplot(data = df_clustMem_long, aes(x = reorder(dfcodes.CpG, rep((1:nrow(df_clustMem)), length.out = nrow(df_clustMem_long))), y = value, colour = dfcodes.segment2, shape = variable)) +
geom_jitter(width = 0, height = 0.3) + scale_y_continuous(breaks=c(0, 1, 2)) + scale_x_discrete(breaks=NULL) +
xlab("CpG Sites") + ylab("Cluster Assignment") + theme_classic() + theme(legend.title = element_blank())
ggsave(here("Figures", "DBSCAN_clustMembership.pdf"), device = "pdf")
ggsave(here("Figures", "DBSCAN_clustMembership.png"), device = "png")
#################
# hierarchical clustering (hclust)
# dendrogram
dd <- dist(df_CpG_m_z_trans, method = "euclidean")
hc <- hclust(dd, method = "ward.D2")
fviz_dend(hc)
fviz_nbclust(df_CpG_m_z_trans, FUN = hcut, method = "wss")
fviz_nbclust(df, FUN = hcut, method = "silhouette")
pdf(here("Figures", "Dendrogram.pdf"))
fviz_dend(
hc,
k = 3,
horiz = TRUE,
rect = TRUE,
rect_fill = TRUE,
rect_border = "jco",
k_colors = "jco",
cex = 0.3
)
dev.off()
